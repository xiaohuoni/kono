{"value":{"content":"var __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n// src/commands/init.ts\nvar init_exports = {};\n__export(init_exports, {\n  default: () => init_default\n});\nmodule.exports = __toCommonJS(init_exports);\nvar import_utils = require(\"@umijs/utils\");\nvar import_types = require(\"../types\");\nvar init_default = (api) => {\n  api.registerCommand({\n    name: \"init\",\n    alias: \"i\",\n    details: `\n${process.env.FRAMEWORK_NAME || \"kono\"} init\n`,\n    description: \"init package quickly\",\n    configResolveMode: \"loose\",\n    async fn({ args }) {\n      var _a;\n      const [type] = args._;\n      if (!api.appData.inits) {\n        import_utils.logger.warn(\"\\u6CA1\\u6709\\u627E\\u5230\\u4EFB\\u4F55\\u7684\\u521D\\u59CB\\u5316\\u7A0B\\u5E8F\");\n        return;\n      }\n      const runGenerator = async (options) => {\n        if (!(options == null ? void 0 : options.template)) {\n          throw new Error(`Init template: ${options.template} not found.`);\n        }\n        const generator = new import_utils.BaseGenerator({\n          path: options.template,\n          target: api.paths.cwd,\n          questions: options == null ? void 0 : options.questions\n        });\n        await generator.run();\n        const { npmClient } = await (0, import_utils.prompts)([\n          {\n            type: \"select\",\n            name: \"npmClient\",\n            message: \"Pick Npm Client\",\n            choices: [\n              { title: \"npm\", value: \"npm\" },\n              { title: \"cnpm\", value: \"cnpm\" },\n              { title: \"tnpm\", value: \"tnpm\" },\n              { title: \"yarn\", value: \"yarn\" },\n              { title: \"pnpm\", value: \"pnpm\", selected: true }\n            ]\n          }\n        ]);\n        (0, import_utils.installWithNpmClient)({ npmClient });\n      };\n      if (type) {\n        const init = api.appData.inits[type];\n        if (!init) {\n          throw new Error(`Init ${type} not found.`);\n        }\n        if (init.type === import_types.InitType.enable) {\n          const enable = await ((_a = init.checkEnable) == null ? void 0 : _a.call(init, {\n            args\n          }));\n          if (!enable) {\n            if (typeof init.disabledDescription === \"function\") {\n              import_utils.logger.warn(init.disabledDescription());\n            } else {\n              import_utils.logger.warn(init.disabledDescription);\n            }\n            return;\n          }\n        }\n        await runGenerator(init);\n      } else {\n        const getEnableInits = async (inits) => {\n          var _a2;\n          const questions2 = [];\n          for (const key of Object.keys(inits)) {\n            const g = inits[key];\n            if (g.type === import_types.InitType.init) {\n              questions2.push({\n                title: `${g.name} -- ${g.description}` || \"\",\n                value: g.key\n              });\n            } else {\n              const enable = await ((_a2 = g == null ? void 0 : g.checkEnable) == null ? void 0 : _a2.call(g, {\n                args\n              }));\n              if (enable) {\n                questions2.push({\n                  title: `${g.name} -- ${g.description}` || \"\",\n                  value: g.key\n                });\n              }\n            }\n          }\n          return questions2;\n        };\n        const questions = await getEnableInits(api.appData.inits);\n        const { gType } = await (0, import_utils.prompts)({\n          type: \"select\",\n          name: \"gType\",\n          message: \"Pick init type\",\n          choices: questions\n        });\n        await runGenerator(api.appData.inits[gType]);\n      }\n    }\n  });\n  api.registerMethod({\n    name: \"registerInit\",\n    fn: (args) => {\n      api.modifyAppData((memo) => {\n        if (!memo.inits)\n          memo.inits = {};\n        memo.inits[args.key] = args;\n        return memo;\n      });\n    }\n  });\n};\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {});\n","options":{"ext":".js"}},"type":"Object"}