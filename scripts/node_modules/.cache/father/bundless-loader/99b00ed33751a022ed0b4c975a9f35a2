{"value":{"content":"var __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n// src/generators/utils.ts\nvar utils_exports = {};\n__export(utils_exports, {\n  GeneratorHelper: () => GeneratorHelper,\n  promptsExitWhenCancel: () => promptsExitWhenCancel,\n  trim: () => trim\n});\nmodule.exports = __toCommonJS(utils_exports);\nvar import_utils = require(\"@umijs/utils\");\nvar import_fs = require(\"fs\");\nvar import_path = require(\"path\");\nvar GeneratorHelper = class {\n  constructor(api) {\n    this.api = api;\n  }\n  addDevDeps(deps) {\n    const { api } = this;\n    if (!import_utils.lodash.isEmpty(deps)) {\n      api.pkg.devDependencies = {\n        ...api.pkg.devDependencies,\n        ...deps\n      };\n      (0, import_fs.writeFileSync)(api.pkgPath, JSON.stringify(api.pkg, null, 2));\n      import_utils.logger.info(\"Update package.json for devDependencies\");\n    }\n  }\n  addScript(name, cmd) {\n    const { api } = this;\n    this.addScriptToPkg(name, cmd);\n    (0, import_fs.writeFileSync)(api.pkgPath, JSON.stringify(api.pkg, null, 2));\n    import_utils.logger.info(\"Update package.json for scripts\");\n  }\n  addScripts(scripts) {\n    const { api } = this;\n    for (const [name, cmd] of Object.entries(scripts)) {\n      this.addScriptToPkg(name, cmd);\n    }\n    (0, import_fs.writeFileSync)(api.pkgPath, JSON.stringify(api.pkg, null, 2));\n    import_utils.logger.info(\"Update package.json for scripts\");\n  }\n  addScriptToPkg(name, cmd) {\n    var _a, _b, _c;\n    const { api } = this;\n    if (((_a = api.pkg.scripts) == null ? void 0 : _a[name]) && ((_b = api.pkg.scripts) == null ? void 0 : _b[name]) !== cmd) {\n      import_utils.logger.warn(`scripts.${name} = \"${(_c = api.pkg.scripts) == null ? void 0 : _c[name]}\" already exists, will be overwritten with \"${cmd}\"!`);\n    }\n    api.pkg.scripts = {\n      ...api.pkg.scripts,\n      [name]: cmd\n    };\n  }\n  appendGitIgnore(patterns) {\n    const { api } = this;\n    const gitIgnorePath = (0, import_path.join)(api.cwd, \".gitignore\");\n    if ((0, import_fs.existsSync)(gitIgnorePath)) {\n      const gitIgnore = (0, import_fs.readFileSync)(gitIgnorePath, \"utf-8\");\n      const toAppendPatterns = patterns.filter((pattern) => !gitIgnore.includes(pattern));\n      if (toAppendPatterns.length > 0) {\n        const toAppend = patterns.join(\"\\n\");\n        (0, import_fs.writeFileSync)(gitIgnorePath, `${gitIgnore}\n${toAppend}`);\n        import_utils.logger.info(\"Update .gitignore\");\n      }\n    }\n  }\n  installDeps() {\n    const { npmClient } = this.api.appData;\n    if (npmClient) {\n      (0, import_utils.installWithNpmClient)({\n        npmClient\n      });\n      import_utils.logger.info(`\\u4F7F\\u7528 ${npmClient} \\u5B89\\u88C5\\u4F9D\\u8D56`);\n    } else {\n      import_utils.logger.warn(`\\u8BF7\\u624B\\u52A8\\u5B89\\u88C5\\u4F9D\\u8D56`);\n    }\n  }\n  async ensureVariableWithQuestion(v, question) {\n    if (!v) {\n      const res = await promptsExitWhenCancel({\n        ...question,\n        name: \"variable\"\n      });\n      return res.variable ? res.variable : question.initial;\n    }\n    return v;\n  }\n};\nfunction promptsExitWhenCancel(questions, options) {\n  return (0, import_utils.prompts)(questions, {\n    ...options,\n    onCancel: () => {\n      process.exit(1);\n    }\n  });\n}\nfunction trim(s) {\n  return (s == null ? void 0 : s.trim()) || \"\";\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  GeneratorHelper,\n  promptsExitWhenCancel,\n  trim\n});\n","options":{"ext":".js"}},"type":"Object"}