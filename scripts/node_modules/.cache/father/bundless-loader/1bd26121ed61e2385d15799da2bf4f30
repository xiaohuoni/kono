{"value":{"content":"var __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n// src/commands/bootstrap.ts\nvar bootstrap_exports = {};\n__export(bootstrap_exports, {\n  default: () => bootstrap_default\n});\nmodule.exports = __toCommonJS(bootstrap_exports);\nvar import_globals = require(\"zx/globals\");\nvar import_constants = require(\"../.internal/constants\");\nvar import_utils = require(\"../.internal/utils\");\nvar bootstrap_default = (api) => {\n  api.registerCommand({\n    name: \"bootstrap\",\n    alias: \"b\",\n    details: `\n${process.env.FRAMEWORK_NAME || \"kono\"} bootstrap\n`,\n    description: \"bootstrap packages quickly\",\n    configResolveMode: \"loose\",\n    async fn({ args }) {\n      const root = import_constants.PATHS.ROOT;\n      const pkgDir = path.join(root, \"packages\");\n      const pkgs = await fs.readdir(pkgDir);\n      for (const pkg of pkgs) {\n        if (pkg.charAt(0) === \".\")\n          continue;\n        if (!(await fs.stat(path.join(pkgDir, pkg))).isDirectory())\n          continue;\n        await bootstrapPkg({\n          pkgDir,\n          pkg,\n          force: argv.force\n        });\n      }\n      function getName(pkgName) {\n        if ([\"kono\"].includes(pkgName)) {\n          return pkgName;\n        } else {\n          return `@kono/${pkgName}`;\n        }\n      }\n      function getVersion() {\n        return \"0.0.0\";\n      }\n      async function bootstrapPkg(opts) {\n        const pkgDir2 = path.join(opts.pkgDir, opts.pkg);\n        if (!opts.force && fs.existsSync(path.join(pkgDir2, \"package.json\"))) {\n          console.log(`${opts.pkg} exists`);\n        } else {\n          const name = getName(opts.pkg);\n          const pkgPkgJSONPath = path.join(pkgDir2, \"package.json\");\n          const hasPkgJSON = fs.existsSync(pkgPkgJSONPath);\n          const pkgPkgJSON = hasPkgJSON ? require(pkgPkgJSONPath) : {};\n          fs.writeJSONSync(pkgPkgJSONPath, Object.assign({\n            name,\n            version: getVersion(),\n            description: name,\n            main: \"dist/index.js\",\n            types: \"dist/index.d.ts\",\n            files: [\"dist\"],\n            scripts: {\n              build: import_constants.SCRIPTS.BUILD,\n              \"build:deps\": import_constants.SCRIPTS.BUNDLE_DEPS,\n              dev: import_constants.SCRIPTS.DEV\n            },\n            repository: {\n              type: \"git\",\n              url: \"https://github.com/xiaohuoni/kono\"\n            },\n            authors: [\n              \"xiaohuoni <xiaohuoni@gmail.com> (https://github.com/xiaohuoni)\"\n            ],\n            license: \"MIT\",\n            bugs: \"https://github.com/xiaohuoni/kono/issues\",\n            homepage: `https://github.com/xiaohuoni/kono/tree/master/packages/${opts.pkg}#readme`,\n            publishConfig: {\n              access: \"public\"\n            }\n          }, {\n            ...hasPkgJSON ? {\n              authors: pkgPkgJSON.authors,\n              bin: pkgPkgJSON.bin,\n              files: pkgPkgJSON.files,\n              scripts: pkgPkgJSON.scripts,\n              description: pkgPkgJSON.description,\n              dependencies: pkgPkgJSON.dependencies,\n              devDependencies: pkgPkgJSON.devDependencies,\n              compiledConfig: pkgPkgJSON.compiledConfig\n            } : {}\n          }), { spaces: \"  \" });\n          if (!fs.existsSync(path.join(pkgDir2, \"README.md\"))) {\n            await fs.writeFile(path.join(pkgDir2, \"README.md\"), `# ${name}\n\n`, \"utf-8\");\n          }\n          await fs.writeFile(path.join(pkgDir2, \"tsconfig.json\"), `{\n  \"extends\": \"../../tsconfig.base.json\",\n  \"compilerOptions\": {\n    \"outDir\": \"./dist\",\n    \"rootDir\": \"./src\"\n  },\n  \"include\": [\"src\"]\n}\n`, \"utf-8\");\n          await fs.writeFile(path.join(pkgDir2, \".fatherrc.ts\"), `import { defineConfig } from 'father';\n\nexport default defineConfig({\nextends: '../../.fatherrc.base.ts',\n});\n`, \"utf-8\");\n          const srcDir = path.join(pkgDir2, \"src\");\n          if (!fs.existsSync(srcDir)) {\n            await $`mkdir ${srcDir}`;\n          }\n          if (!fs.existsSync(path.join(pkgDir2, \"src\", \"index.ts\"))) {\n            await fs.writeFile(path.join(pkgDir2, \"src\", \"index.ts\"), `\nexport default () => {\n  return '${name}';\n};\n`.trimLeft(), \"utf-8\");\n            await fs.writeFile(path.join(pkgDir2, \"src\", \"index.test.ts\"), `\nimport index from './index';\n\ntest('normal', () => {\n  expect(index()).toEqual('${name}');\n});\n`.trimLeft(), \"utf-8\");\n          }\n          (0, import_utils.setExcludeFolder)({ pkg: opts.pkg, cwd: root });\n          console.log(chalk.green(`${opts.pkg} bootstrapped`));\n        }\n      }\n    }\n  });\n};\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {});\n","options":{"ext":".js"}},"type":"Object"}